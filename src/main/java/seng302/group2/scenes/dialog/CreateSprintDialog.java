package seng302.group2.scenes.dialog;

import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.util.Callback;
import seng302.group2.App;
import seng302.group2.Global;
import seng302.group2.scenes.control.CustomComboBox;
import seng302.group2.scenes.control.CustomDatePicker;
import seng302.group2.scenes.control.CustomTextArea;
import seng302.group2.scenes.control.RequiredField;
import seng302.group2.workspace.project.Project;
import seng302.group2.workspace.project.release.Release;
import seng302.group2.workspace.project.sprint.Sprint;
import seng302.group2.workspace.team.Team;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Map;

import static javafx.collections.FXCollections.observableArrayList;
import static seng302.group2.util.validation.NameValidator.validateName;
import static seng302.group2.util.validation.ShortNameValidator.validateShortName;

/**
 * Class to create a pop up dialog for creating a sprint
 * Created by drm127 on 29/07/15.
 */
public class CreateSprintDialog extends Dialog<Map<String, String>> {
    static Boolean correctShortName = Boolean.FALSE;
    static Boolean correctLongName = Boolean.FALSE;

    CustomComboBox<Project> projectComboBox;
    CustomComboBox<Team> teamComboBox;
    CustomComboBox<Release> releaseComboBox;
    CustomDatePicker sprintStartDatePicker;
    CustomDatePicker sprintEndDatePicker;
    Node createButton;

    /**
     * Constructor for the CreateSprintDialog. The dialog generated by this constructor
     * is shown after construction. A default project is selected in the project combo box.
     * @param defaultProject The default selected project. use null for no default option.
     */
    public CreateSprintDialog(Project defaultProject) {
        correctShortName = Boolean.FALSE;
        correctLongName = Boolean.FALSE;

        this.setTitle("New Sprint");
        this.getDialogPane().setStyle(" -fx-max-width:600px; -fx-max-height: 500px; -fx-pref-width: 600px; "
                + "-fx-pref-height: 500px;");

        VBox grid = new VBox();
        grid.spacingProperty().setValue(10);
        Insets insets = new Insets(20, 20, 20, 20);
        grid.setPadding(insets);

        ButtonType btnTypeCreate = new ButtonType("Create", ButtonBar.ButtonData.OK_DONE);
        this.getDialogPane().getButtonTypes().addAll(btnTypeCreate, ButtonType.CANCEL);

        RequiredField shortNameCustomField = new RequiredField("Goal:");
        RequiredField longNameCustomField = new RequiredField("Long Name:");
        CustomTextArea descriptionTextArea = new CustomTextArea("Description:");

        sprintStartDatePicker = new CustomDatePicker("Start Date:", true);
        sprintEndDatePicker = new CustomDatePicker("End Date:", true);


        final Callback<DatePicker, DateCell> startDateCellFactory =
            new Callback<DatePicker, DateCell>() {
                @Override
                public DateCell call(final DatePicker datePicker) {
                    return new DateCell() {
                        @Override
                        public void updateItem(LocalDate item, boolean empty) {
                            super.updateItem(item, empty);
                            if (releaseSelected() && item.isAfter(releaseComboBox.getValue().getEstimatedDate())) {
                                setDisable(true);
                                setStyle("-fx-background-color: #ffc0cb;");
                            }
                        }
                    };
                }
            };
        sprintStartDatePicker.getDatePicker().setDayCellFactory(startDateCellFactory);

        final Callback<DatePicker, DateCell> endDateCellFactory =
            new Callback<DatePicker, DateCell>() {
                @Override
                public DateCell call(final DatePicker datePicker) {
                    return new DateCell() {
                        @Override
                        public void updateItem(LocalDate item, boolean empty) {
                            super.updateItem(item, empty);
                            if (startDateSelected() && (item.isBefore(sprintStartDatePicker.getValue()))) {
                                setDisable(true);
                                setStyle("-fx-background-color: #ffc0cb;");
                            }
                            if (releaseSelected() && item.isAfter(releaseComboBox.getValue().getEstimatedDate())) {
                                setDisable(true);
                                setStyle("-fx-background-color: #ffc0cb;");
                            }
                            if (startDateSelected()) {
                                long p = ChronoUnit.DAYS.between(sprintStartDatePicker.getValue(), item);
                                setTooltip(new Tooltip(
                                                "Sprint duration: " + p + " days.")
                                );
                            }

                        }
                    };
                }
            };
        sprintEndDatePicker.getDatePicker().setDayCellFactory(endDateCellFactory);


        // Create project combo box.
        ObservableList<Project> projectOptions = observableArrayList();
        projectComboBox = new CustomComboBox<>("Project:", true);
        projectComboBox.getComboBox().setItems(projectOptions);

        // Create release combo box.
        ObservableList<Release> releaseOptions = observableArrayList();
        releaseComboBox = new CustomComboBox<>("Release:", true);
        releaseComboBox.getComboBox().setItems(releaseOptions);

        // Create team combo box.
        ObservableList<Team> teamOptions = observableArrayList();
        teamComboBox = new CustomComboBox<>("Team:", true);
        teamComboBox.getComboBox().setItems(teamOptions);

        // Initially disabled as no team selected
        teamComboBox.disable(true);
        releaseComboBox.disable(true);
        sprintStartDatePicker.disable(true);
        sprintEndDatePicker.disable(true);

        for (Project project : Global.currentWorkspace.getProjects()) {
            projectOptions.add(project);
        }

        grid.getChildren().addAll(shortNameCustomField, longNameCustomField, projectComboBox,
                releaseComboBox, teamComboBox, sprintStartDatePicker, sprintEndDatePicker, descriptionTextArea);

        //Add grid of controls to dialog
        this.getDialogPane().setContent(grid);

        // Request focus on the username field by default.
        Platform.runLater(() -> shortNameCustomField.getTextField().requestFocus());

        createButton = this.getDialogPane().lookupButton(btnTypeCreate);
        createButton.setDisable(true);

        shortNameCustomField.getTextField().textProperty().addListener((observable, oldValue, newValue) -> {
                correctShortName = validateShortName(shortNameCustomField, null);
                toggleCreate();
            });

        longNameCustomField.getTextField().textProperty().addListener((observable, oldValue, newvalue) -> {
                correctLongName = validateName(longNameCustomField);
                toggleCreate();
            });

        projectComboBox.getComboBox().valueProperty().addListener(new ChangeListener<Project>() {
                @Override
                public void changed(ObservableValue<? extends Project> observable,
                                    Project oldValue, Project newValue) {

                    releaseComboBox.disable(false);
                    releaseComboBox.setValue(null);
                    teamComboBox.disable(false);
                    teamComboBox.setValue(null);
                    sprintStartDatePicker.disable(true);
                    sprintStartDatePicker.setValue(null);
                    sprintEndDatePicker.disable(true);
                    sprintEndDatePicker.setValue(null);


                    releaseOptions.clear();

                    for (Release release : newValue.getReleases()) {
                        releaseOptions.add(release);
                    }

                    teamOptions.clear();

                    for (Team team : newValue.getAllTeams()) {
                        teamOptions.add(team);
                    }

                    toggleCreate();
                }
            });

        releaseComboBox.getComboBox().valueProperty().addListener(new ChangeListener<Release>() {
                @Override
                public void changed(ObservableValue<? extends Release> observable,
                                    Release oldValue, Release newValue) {

                    if (newValue != null) {
                        sprintStartDatePicker.disable(false);
                        sprintStartDatePicker.setValue(null);
                        sprintEndDatePicker.disable(true);
                        sprintEndDatePicker.setValue(null);

                        toggleCreate();
                    }
                }
            });

        sprintStartDatePicker.getDatePicker().valueProperty().addListener(new ChangeListener<LocalDate>() {
                @Override
                public void changed(ObservableValue<? extends LocalDate> observable,
                                    LocalDate oldValue, LocalDate newValue) {
                    if (endDateSelected() && (newValue != null)
                            && newValue.isAfter(sprintEndDatePicker.getValue())) {
                        sprintEndDatePicker.disable(false);
                        sprintEndDatePicker.setValue(null);
                        teamComboBox.setValue(null);
                        teamComboBox.disable(true);
                    }
                    else if (newValue != null) {
                        sprintEndDatePicker.disable(false);
                    }
                    toggleCreate();
                }
            });


        sprintEndDatePicker.getDatePicker().valueProperty().addListener(new ChangeListener<LocalDate>() {
                @Override
                public void changed(ObservableValue<? extends LocalDate> observable,
                                    LocalDate oldValue, LocalDate newValue) {
                    toggleCreate();
                }
            });

        teamComboBox.getComboBox().valueProperty().addListener(new ChangeListener<Team>() {
                @Override
                public void changed(ObservableValue<? extends Team> observable, Team oldValue, Team newValue) {
                    toggleCreate();
                }
            });

        this.setResultConverter(b -> {
                if (b == btnTypeCreate) {
                    String goal = shortNameCustomField.getText();
                    String longName = longNameCustomField.getText();
                    String description = descriptionTextArea.getText();
                    LocalDate sprintStartDate = sprintStartDatePicker.getValue();
                    LocalDate sprintEndDate = sprintEndDatePicker.getValue();
                    Project sprintProject = projectComboBox.getValue();
                    Team sprintTeam = teamComboBox.getValue();
                    Release sprintRelease = releaseComboBox.getValue();

                    Sprint sprint = new Sprint(goal, longName, description, sprintStartDate,
                            sprintEndDate, sprintProject, sprintTeam, sprintRelease);

                    sprintProject.add(sprint);
                    App.mainPane.selectItem(sprint);

                    this.close();

                }
                return null;
            });

        if (defaultProject == null) {
            projectComboBox.setValue(Global.currentWorkspace.getProjects().get(0));
        }
        else {
            projectComboBox.setValue(defaultProject);
        }
        this.setResizable(false);
        this.show();

    }

    private Boolean projectSelected() {
        return (projectComboBox.getValue() != null);
    }

    private Boolean teamSelected() {
        return (teamComboBox.getValue() != null);
    }

    private Boolean releaseSelected() {
        return (releaseComboBox.getValue() != null);
    }

    private Boolean startDateSelected() {
        return (sprintStartDatePicker.getValue() != null);
    }

    private Boolean endDateSelected() {
        return (sprintEndDatePicker.getValue() != null);
    }

    private void toggleCreate() {
        createButton.setDisable(!(correctShortName && correctLongName
                && projectSelected() && teamSelected() && releaseSelected()
                && startDateSelected() && endDateSelected()));
    }


}
